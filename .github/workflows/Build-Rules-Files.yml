name: Build Rules Files
on:
  workflow_dispatch:
  schedule:
    - cron: 00 19 * * *
#  push:
#    branches:
#      - main
#    paths-ignore:
#      - "**/README.md"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "update_version=$(date -d '+8 hours' +%Y-%m-%d)" >> ${GITHUB_ENV}
          echo "singbox_core_version=$(curl -sSL https://raw.githubusercontent.com/SagerNet/sing-box/docs/configuration/rule-set/source-format/index.html | awk '/<li>/ {last=$0} END {print last}' | sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')" >> ${GITHUB_ENV}
          echo "singbox_rules_version=$(curl -sSL https://raw.githubusercontent.com/SagerNet/sing-box/docs/configuration/rule-set/source-format/index.html | awk '/<li>/ {last=$0} END {print last}' | sed -n 's/^<li>\([0-9]\+\).*/\1/p')" >> ${GITHUB_ENV}
          echo "domains_download_url=https://raw.githubusercontent.com/cnfind/geo-domain/domains" >> ${GITHUB_ENV}
          echo "ips_download_url=https://github.com/cnfind/geo-dat/releases/download/ips" >> ${GITHUB_ENV}
        shell: bash

      - name: Clone Repository
        uses: actions/checkout@master

      - name: Checkout cnfind/geo-domain
        uses: actions/checkout@v4
        with:
          repository: cnfind/geo-domain
          path: custom

      - name: Checkout v2fly/domain-list-community
        uses: actions/checkout@v4
        with:
          repository: v2fly/domain-list-community
          path: community

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./custom/go.mod
          cache-dependency-path: ./custom/go.sum

      - name: Generate `mihomo` geodata
        run: |
          mkdir -p ./community/mydata/
          archs1=(private ads tracker microsoft-cn apple apple-cn google-cn games-cn ai speedtest netflix appletv youtube tiktok bilibili tld-proxy proxy tld-cn cn)
          archs2=(private ads tracker microsoft-cn apple apple-cn google-cn games-cn ai speedtest youtube tiktok tld-proxy proxy tld-cn cn)

          # Generate `mihomo` geosite-all.dat
          for arch1 in "${archs1[@]}"; do
            curl -sSL "${domains_download_url}/${arch1}.list" | grep -E 'DOMAIN,|DOMAIN-SUFFIX,|DOMAIN-KEYWORD' | sed -e 's/^DOMAIN,/full:/' -e 's/^DOMAIN-SUFFIX,//' -e 's/^DOMAIN-KEYWORD,/keyword:/' > "./community/mydata/${arch1}"
          done
          curl -sSL "${domains_download_url}/fakeip.list" | sed -e 's/^DOMAIN,/full:/' -e 's/^DOMAIN-SUFFIX,//' -e 's/^DOMAIN-KEYWORD,/keyword:/' -e 's/^DOMAIN-REGEX,/regexp:/' > ./community/mydata/fakeip
          curl -sSL "${domains_download_url}/fakeip-lite.list" | grep -Ev 'DOMAIN-REGEX,|ntp|time|stun' | sed -e 's/^DOMAIN,/full:/' -e 's/^DOMAIN-SUFFIX,//' > ./community/mydata/fakeip-lite
          cat <<EOF >> ./community/mydata/fakeip-lite
          keyword:ntp
          keyword:time
          keyword:stun
          EOF
          cd ./community/
          go run ./ --datapath=./mydata/ --outputname geosite-all.dat

          # Generate `mihomo` geosite.dat
          rm -f ./mydata/*
          for arch2 in "${archs2[@]}"; do
            curl -sSL "${domains_download_url}/${arch2}.list" | grep -E 'DOMAIN,|DOMAIN-SUFFIX,|DOMAIN-KEYWORD' | sed -e 's/^DOMAIN,/full:/' -e 's/^DOMAIN-SUFFIX,//' -e 's/^DOMAIN-KEYWORD,/keyword:/' > "./mydata/${arch2}"
          done
          curl -sSL "${domains_download_url}/fakeip.list" | sed -e 's/^DOMAIN,/full:/' -e 's/^DOMAIN-SUFFIX,//' -e 's/^DOMAIN-KEYWORD,/keyword:/' -e 's/^DOMAIN-REGEX,/regexp:/' > ./mydata/fakeip
          curl -sSL "${domains_download_url}/fakeip-lite.list" | grep -Ev 'DOMAIN-REGEX,|ntp|time|stun' | sed -e 's/^DOMAIN,/full:/' -e 's/^DOMAIN-SUFFIX,//' > ./mydata/fakeip-lite
          cat <<EOF >> ./mydata/fakeip-lite
          keyword:ntp
          keyword:time
          keyword:stun
          EOF
          go run ./ --datapath=./mydata/ --outputname geosite.dat

          # Generate `mihomo` geosite-lite.dat
          rm -f ./mydata/ads
          rm -f ./mydata/youtube
          rm -f ./mydata/tiktok
          go run ./ --datapath=./mydata/ --outputname geosite-lite.dat

      - name: Generate `sing-box` geodata
        run: |
          cd ./community/ || exit 1
          go install -trimpath -ldflags="-s -w -buildid=" github.com/metacubex/geo/cmd/geo@master
          for file in $(ls *.dat | sed 's/\.dat$//'); do
            geo convert site -i v2ray -o sing -f "./${file}.db" "./${file}.dat"
          done

      - name: Get geoip relative files
        run: |
          mkdir -p ./mihomo/ ./sing-box/
          # Download mihomo geoip files (.mmdb)
          mihomo_mmdb=($(curl -sSL https://api.github.com/repos/cnfind/geo-dat/releases | grep '"browser_download_url"' | grep '.mmdb' | awk -F'"' '{print $4}'))
          count_mihomo_mmdb=${#mihomo_mmdb[@]}
          for ((i = 0; i < count_mihomo_mmdb; i++)); do
            wget -P ./mihomo/ "${mihomo_mmdb[i]}"
          done

          # Download mihomo other geoip files (except .mmdb)
          mihomo_others=($(curl -sSL https://api.github.com/repos/cnfind/geo-dat/releases | grep '"browser_download_url"' | grep '/mihomo/' | grep -v '.mmdb' | awk -F'"' '{print $4}'))
          count_mihomo_others=${#mihomo_others[@]}
          for ((i = 0; i < count_mihomo_others; i++)); do
            wget -P ./community/ "${mihomo_others[i]}"
          done

          # Download sing-box all geoip files
          singbox_all=($(curl -sSL https://api.github.com/repos/cnfind/geo-dat/releases | grep '"browser_download_url"' | grep '/sing-box/' | awk -F'"' '{print $4}'))
          count_singbox_all=${#singbox_all[@]}
          for ((i = 0; i < count_singbox_all; i++)); do
            wget -P ./community/ "${singbox_all[i]}"
          done

      - name: Move `mihomo` and `sing-box` geodata files
        run: |
          cd ./community/ || exit 1
          for file in $(ls *.dat *.metadb); do
            install -Dp "./${file}" ../mihomo/
          done
          for file in $(ls *.db); do
            install -Dp "./${file}" ../sing-box/
          done
          rm -rf ../custom* ../community*

      - name: Generate `mihomo` rule-set
        run: |
          mkdir -p ./mihomo-ruleset/
          domains=(private ads tracker microsoft-cn apple apple-cn google-cn games-cn ai netflix appletv youtube tiktok bilibili tld-proxy proxy tld-cn cn)
          archs=(applications speedtest)
          ips=(privateip cnip netflixip telegramip)

          # Generate `mihomo` rule-set (yaml)
          for domain in "${domains[@]}"; do
            echo 'payload:' > "./mihomo-ruleset/${domain}.yaml"
            curl -sSL "${domains_download_url}/${domain}.list" | grep -E 'DOMAIN,|DOMAIN-SUFFIX,' | sed -e "s/^DOMAIN,/  - '/" -e "s/^DOMAIN-SUFFIX,/  - '+\./" -e "s/$/'/" >> "./mihomo-ruleset/${domain}.yaml"
          done
          echo 'payload:' > "./mihomo-ruleset/fakeip.yaml"
          curl -sSL "${domains_download_url}/fakeip.list" | sed -e "s/^DOMAIN,/  - '/" -e "s/^DOMAIN-SUFFIX,/  - '+\./" -e "s/^DOMAIN-REGEX,/  - '/" -e "s/'\./'/" -e "s/$/'/" >> ./mihomo-ruleset/fakeip.yaml
          echo 'payload:' > "./mihomo-ruleset/fakeip-lite.yaml"
          curl -sSL "${domains_download_url}/fakeip-lite.list" | sed -e "s/^DOMAIN,/  - '/" -e "s/^DOMAIN-SUFFIX,/  - '+\./" -e "s/^DOMAIN-REGEX,/  - '/" -e "s/'\./'/" -e "s/$/'/" >> ./mihomo-ruleset/fakeip-lite.yaml

          for arch in "${archs[@]}"; do
            echo 'payload:' > "./mihomo-ruleset/${arch}.yaml"
            curl -sSL "${domains_download_url}/${arch}.list" | sed 's/^/  - /' >> "./mihomo-ruleset/${arch}.yaml"
          done

          for ip in "${ips[@]}"; do
            echo 'payload:' > "./mihomo-ruleset/${ip}.yaml"
            curl -sSL "${ips_download_url}/${ip}.list" | grep 'IP-CIDR' | sed -e "s/^IP-CIDR,/  - '/" -e "s/^IP-CIDR6,/  - '/" -e "s/$/'/" >> "./mihomo-ruleset/${ip}.yaml"
          done

          # Generate `mihomo` rule-set (text)
          for domain in "${domains[@]}"; do
            curl -sSL "${domains_download_url}/${domain}.list" | grep -E 'DOMAIN,|DOMAIN-SUFFIX,' | sed -e 's/^DOMAIN,//' -e 's/^DOMAIN-SUFFIX,/+\./' > "./mihomo-ruleset/${domain}.list"
          done
          curl -sSL "${domains_download_url}/fakeip.list" | sed -e 's/^DOMAIN,//' -e 's/^DOMAIN-SUFFIX,/+\./' -e 's/^DOMAIN-REGEX,//' -e 's/^\.//' > ./mihomo-ruleset/fakeip.list
          curl -sSL "${domains_download_url}/fakeip-lite.list" | sed -e 's/^DOMAIN,//' -e 's/^DOMAIN-SUFFIX,/+\./' -e 's/^DOMAIN-REGEX,//' -e 's/^\.//' > ./mihomo-ruleset/fakeip-lite.list

          for arch in "${archs[@]}"; do
            curl -sSL "${domains_download_url}/${arch}.list"  > "./mihomo-ruleset/${arch}.list"
          done

          for ip in "${ips[@]}"; do
            curl -sSL "${ips_download_url}/${ip}.list" | grep 'IP-CIDR' | sed -e 's/^IP-CIDR,//' -e 's/^IP-CIDR6,//' > "./mihomo-ruleset/${ip}.list"
          done

          # Ready for generate `mihomo` rule-set (mrs)
          for domain in "${domains[@]}"; do
            mkdir -p "./tools/domains/${domain}/"
            curl "${domains_download_url}/${domain}.list" | grep -E 'DOMAIN,|DOMAIN-SUFFIX,' | sed -e 's/^DOMAIN,//' -e 's/^DOMAIN-SUFFIX,/+\./' > "./tools/domains/${domain}/${domain}.list"
          done
          mkdir -p "./tools/domains/fakeip/"
          curl -sSL "${domains_download_url}/fakeip.list" | sed -e 's/^DOMAIN,//' -e 's/^DOMAIN-SUFFIX,/+\./' -e 's/^DOMAIN-REGEX,//' -e 's/^\.//' > ./tools/domains/fakeip/fakeip.list
          mkdir -p "./tools/domains/fakeip-lite/"
          curl -sSL "${domains_download_url}/fakeip-lite.list" | sed -e 's/^DOMAIN,//' -e 's/^DOMAIN-SUFFIX,/+\./' -e 's/^DOMAIN-REGEX,//' -e 's/^\.//' > ./tools/domains/fakeip-lite/fakeip-lite.list

          for ip in "${ips[@]}"; do
            mkdir -p "./tools/ips/${ip}/"
            curl -sSL "${ips_download_url}/${ip}.list"| grep 'IP-CIDR' | sed -e 's/^IP-CIDR,//' -e 's/^IP-CIDR6,//' > "./tools/ips/${ip}/${ip}.list"
          done

          # Ready for generate `sing-box` rule_set
          for domain in "${domains[@]}"; do
            mkdir -p "./tools/rules/${domain}/"
            curl "${domains_download_url}/${domain}.list" | grep -E 'DOMAIN,|DOMAIN-SUFFIX,|DOMAIN-KEYWORD' > "./tools/rules/${domain}/${domain}.yaml"
          done
          mkdir -p ./tools/rules/fakeip/
          curl "${domains_download_url}/fakeip.list" > ./tools/rules/fakeip/fakeip.yaml
          mkdir -p ./tools/rules/fakeip-lite/
          curl "${domains_download_url}/fakeip-lite.list" | grep -Ev 'DOMAIN-REGEX,|ntp|time|stun' > ./tools/rules/fakeip-lite/fakeip-lite.yaml
          cat <<EOF >> ./tools/rules/fakeip-lite/fakeip-lite.yaml
          DOMAIN-KEYWORD,ntp
          DOMAIN-KEYWORD,time
          DOMAIN-KEYWORD,stun
          EOF

          for arch in "${archs[@]}"; do
            mkdir -p "./tools/rules/${arch}/"
            curl "${domains_download_url}/${arch}.list" > "./tools/rules/${arch}/${arch}.yaml"
          done

          for ip in "${ips[@]}"; do
            mkdir -p "./tools/rules/${ip}/"
            curl -sSL "${ips_download_url}/${ip}.list"| grep 'IP-CIDR' > "./tools/rules/${ip}/${ip}.yaml"
          done

      - name: Download and unzip `mihomo` core
        run: |
          wget https://github.com/DustinWin/proxy-tools/releases/download/mihomo/mihomo-alpha-linux-amd64.tar.gz -O - | tar -zxf - -C ./tools/
          mv -f ./tools/CrashCore ./tools/mihomo

      - name: Generate `mihomo` rule-set (mrs)
        run: |
          cd ./tools/
          chmod +x ./mihomo
          list=($(ls ./domains/))
          for ((i = 0; i < ${#list[@]}; i++)); do
            ./mihomo convert-ruleset domain text "./domains/${list[i]}/${list[i]}.list" ../mihomo-ruleset/${list[i]}.mrs
          done

          list=($(ls ./ips/))
          for ((i = 0; i < ${#list[@]}; i++)); do
            ./mihomo convert-ruleset ipcidr text "./ips/${list[i]}/${list[i]}.list" ../mihomo-ruleset/${list[i]}.mrs
          done
          rm -rf ./mihomo* ./domains/ ./ips/

      - name: Download and unzip `sing-box` core
        run: |
          wget "https://github.com/SagerNet/sing-box/releases/download/v${{ env.singbox_core_version }}/sing-box-${{ env.singbox_core_version }}-linux-amd64.tar.gz" -O - | tar -zxf - -C ./tools/
          mv -f ./tools/sing-box-${{ env.singbox_core_version }}-linux-amd64/sing-box ./tools/sing-box

      - name: Generate `sing-box` rule_set
        run: |
          mkdir -p ./sing-box-ruleset/
          cd ./tools/
          sed -i 's/"version": 1/"version": ${{ env.singbox_rules_version }}/' ./convert.sh
          chmod +x ./convert.sh && ./convert.sh
          rm -rf ./sing-box* ./rules*
          mv -f ./*.json ./*.srs ../sing-box-ruleset/

      - name: Generate `loon` rule-set
        run: |
          mkdir -p ./loon-ruleset/
          domainsl=(private ads tracker microsoft-cn apple apple-cn google-cn games-cn ai netflix appletv youtube tiktok bilibili tld-proxy proxy tld-cn cn)
          archsl=(applications speedtest)
          ipsl=(privateip cnip netflixip telegramip)

          # Generate `loon` rule-set (list)
          for domain in "${domainsl[@]}"; do
            curl -sSL "${domains_download_url}/${domain}.list" | sed -e '/^DOMAIN-REGEX,/d' -e '/^PROCESS-NAME,/d' -e 's/^\.//' > "./loon-ruleset/${domain}.list"
          done
          curl -sSL "${domains_download_url}/fakeip.list" | sed -e '/^DOMAIN-REGEX,/d' -e '/^PROCESS-NAME,/d' -e 's/^\.//' > ./loon-ruleset/fakeip.list
          curl -sSL "${domains_download_url}/fakeip-lite.list" | sed -e '/^DOMAIN-REGEX,/d' -e '/^PROCESS-NAME,/d' -e 's/^\.//' > ./loon-ruleset/fakeip-lite.list

          for arch in "${archsl[@]}"; do
            curl -sSL "${domains_download_url}/${arch}.list" | sed -e '/^DOMAIN-REGEX,/d' -e '/^PROCESS-NAME,/d' -e 's/^\.//' > "./loon-ruleset/${arch}.list"
          done

          for ip in "${ipsl[@]}"; do
            curl -sSL "${ips_download_url}/${ip}.list" | sed -e '/^IP-ASN,/d' -e 's/^\.//' > "./loon-ruleset/${ip}.list"
          done

      - name: Generate sha256 checksum for dat files
        run: |
          cd ./mihomo/ || exit 1
          for name in $(ls *.dat); do
            sha256sum ${name} > ./${name}.sha256sum
          done

      - name: Generate sha256 checksum for mmdb files
        run: |
          cd ./mihomo/ || exit 1
          for name in $(ls *.mmdb); do
            sha256sum ${name} > ./${name}.sha256sum
          done

      - name: Generate sha256 checksum for metadb files
        run: |
          cd ./mihomo/ || exit 1
          for name in $(ls *.metadb); do
            sha256sum ${name} > ./${name}.sha256sum
          done

      - name: Release and upload `mihomo` assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: mihomo
          tag: mihomo
          overwrite: true
          body: |
            Updated Date：${{ env.update_version }}
          file_glob: true
          file: ./mihomo/*

      - name: Commit and push `mihomo` branch
        run: |
          cd ./mihomo/ || exit 1
          git init
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout -b mihomo
          git add . && git commit -m "geodata updated on ${update_version}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin mihomo

      - name: Release and upload `mihomo-ruleset` assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: mihomo-ruleset
          tag: mihomo-ruleset
          overwrite: true
          body: |
            Updated Date：${{ env.update_version }}
          file_glob: true
          file: ./mihomo-ruleset/*

      - name: Commit and push `mihomo-ruleset` branch
        run: |
          cd ./mihomo-ruleset/ || exit 1
          git init
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout -b mihomo-ruleset
          git add . && git commit -m "ruleset updated on ${update_version}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin mihomo-ruleset

      - name: Release and upload `sing-box` assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: sing-box
          tag: sing-box
          overwrite: true
          body: |
            Updated Date：${{ env.update_version }}
          file_glob: true
          file: ./sing-box/*

      - name: Commit and push `sing-box` branch
        run: |
          cd ./sing-box/ || exit 1
          git init
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout -b sing-box
          git add . && git commit -m "geodata updated on ${update_version}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin sing-box

      - name: Release and upload `sing-box-ruleset` assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: sing-box-ruleset
          tag: sing-box-ruleset
          overwrite: true
          body: |
            Updated Date：${{ env.update_version }}
          file_glob: true
          file: ./sing-box-ruleset/*

      - name: Commit and push `sing-box-ruleset` branch
        run: |
          cd ./sing-box-ruleset/ || exit 1
          git init
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout -b sing-box-ruleset
          git add . && git commit -m "ruleset updated on ${update_version}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin sing-box-ruleset

      - name: Release and upload `loon-ruleset` assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: loon-ruleset
          tag: loon-ruleset
          overwrite: true
          body: |
            Updated Date：${{ env.update_version }}
          file_glob: true
          file: ./loon-ruleset/*

      - name: Commit and push `loon-ruleset` branch
        run: |
          cd ./loon-ruleset/ || exit 1
          git init
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout -b loon-ruleset
          git add . && git commit -m "ruleset updated on ${update_version}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin loon-ruleset

      - name: Purge jsDelivr CDN
        run: |
          cd ./mihomo/ || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@mihomo/${file}"
          done
          cd ../sing-box/ || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@sing-box/${file}"
          done
          cd ../mihomo-ruleset/ || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@mihomo-ruleset/${file}"
          done
          cd ../sing-box-ruleset/ || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@sing-box-ruleset/${file}"
          done
          cd ../loon-ruleset/ || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@loon-ruleset/${file}"
          done

      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 3
          keep_minimum_runs: 1